const colors = [
  0x632b4b,
  0x6d3656,
  0x78375c,
  0x712f55,
  0x873665,
  0xd13b3b,
  0xa62b2b,
  0xc03535,
  0x36d517,
  0x21A6AD,
  0x489fa4,
  0x3d3e40,
  0x2DC010,
  0x33e311,
  0x48E311,
  0xad8111,
  0x7be311,
  0x008040,
  0xd57917,
  0xD56517,
  0x124445,
  0x1775d5,
  0xe861f0,
  0x008000,
  0x0080a8,
  0xC00020,
  0x50eed7,
  0x14EED7,
  0x14E1D7,
  0x786C42,
  0x006C42,
  0x0046FF,
  0xFFA717,
  0x0000ff,
  0xFFFF00,
  0x808000,
  0xA08400,
  0x3d3d3d,
  0xB3D01A,
  0x788E07,
  0x684C4C,
  0xff007f,
  0xb33976,
  0xB8A928,
  0x3f3d3e,
  0x3d3e37,
  0x3d3e38,
  0x3d3e39,
  0x3d3e3a,
  0x3d3e3b,
  0x3d3e3c,
  0x3d3e3d,
  0x3d3e3e,
  0x3d3e3f,
  0x3d3e41,
  0x3C0F0A,
  0xD3E6F0,
  0x9C6C42,
  0xC02020,
  0x00F344,
  0x008080,
  0x018080,
  0x028080,
  0x208080,
  0x608080,
  0x204060,
  0x224060,
  0x214060,
  0x224060,
  0x234060,
  0x408080,
  0x418080,
  0x428080,
  0x438080,
  0xE08080,
  0xC08080,
  0xC08082,
  0xFF8080,
  0xFF00FF,
  0x3d5a3d,
  0x3d5a4f,
  0x3D5AB2,
  0x9b1818,
  0x93cb5c,
  0x3d5a5b,
  0xE1CD32,
  0xFF6A02,
  0x6dcba2,
  0x6dcb28,
  0x93cb4c,
  0x93cb4d,
  0x93cb4e,
  0x93cb4f,
  0x93cb5a,
  0x3D5A52,
  0x3D5A51,
  0x3D5A50,
  0x752ACF,
  0x681EC1,
  0x550DAD,
  0x410687,
  0xf0d517,
  0x5a9628,
  0x5A9629,
  0xcc9944,
  0xf7cf8d,
  0xf6cfad,
  0x968f5f,
  0x968f96,
  0xc88f5f,
  0x967F11,
  0x967f5f,
  0x167f5f,
  0x1C9B9B,
  0x933db2,
  0xED6868,
  0xB67070,
  0xD11A1A,
  0xE43838,
  0xB62323,
  0x6D2121,
  0xAD6464,
  0x800404,
  0x490606,
  0xAD8C8C,
  0x9B2323,
  0x400202,
  0x9B0B0B,
  0xAD3D3D,
  0x643333,
  0x3A2828,
  0x8B2222,
  0x680000,
  0xFF9494,
  0x978282,
  0x680D0D,
  0x462020,
  0xFF8686,
  0x5D1818,
  0x805C5C,
  0x686363,
  0xA20606,
  0xB90303,
  0xD12525,
  0x8B6969,
  0x2E0C0C,
  0x807272,
  0xD6D8E3,
  0x77A5BD,
  0x1133F1,
  0x11A3FC,
  0x006B1E,
  0x3046c1,
  0x775ddb,
  0x6ba04b,
  0xffd100,
  0xffd101,
  0xffd102,
  0xffd103,
  0xffd104,
  0xffd105,
  0xffd106,
  0xffd107,
  0xffd108,
  0xffd109,
  0xffd110,
  0xffd111,
  0x364d24,
  0x085b77,
  0x39401a,
  0x39401b,
  0x39401c,
  0x39401d,
  0x157cb0,
  0x157cb5,
  0x157cb6,
  0x157cb7,
  0x157cb8,
  0xD17612,
  0xAE8383,
  0xB9772E,
  0x124ED1,
  0x12D1C7,
  0x36d5c9,
  0xd57125,
  0x004611,
  0x004777,
  0x555fAE,
  0x2B3380,
  0x065774,
  0x6C72A2,
  0x2289AE,
  0x8C16B6,
  0x0C1774,
  0x393B46,
  0x5C98AE,

  0x24888a,
  0x18a0d6,
  0x0da899,
  0x42244d,
  0x99cb4c,
  0x99cb4d,
  0x99cb4e,
  0x99cb4f,
  0x99cb5a,
  0x1133F3,
  0x89a04b,
  0xbaa345,
  0x57cace,
  0x57dace,

  0x3f55d1,
  0x2e99d1,
  0x9d99d1,
]

const fs = require('fs');
const PNG = require('pngjs').PNG;
const Color = require('color');

const sub_x = 2;
const sub_y = 2;
const width = 25;
const height = 25;
const variations = Math.pow(2, sub_x * sub_y);
const png = new PNG({
  width: width * variations / sub_x,
  height: height * variations / sub_y,
  filterType: -1
});

for (let y = 0; y < height; y++) {
  for (let x = 0; x < width; x++) {
    let col = Color(colors[x + width * y], "rgb");
    for (let vy = 0; vy < sub_y * sub_y; vy++) {
      for (let vx = 0; vx < sub_x * sub_x; vx++) {
        for (let yy = 0; yy < sub_y; yy++) {
          for (let xx = 0; xx < sub_x; xx++) {
            const xxx = (x*4 + vx) * 2;
            const yyy = (y*4 + vy) * 2;
            const idx = (png.width * (yyy + yy) + (xxx + xx)) << 2;
            if(((vx + vy*4) >> (xx+yy*2) & 1) == 0) {
              png.data[idx  ] = col.red();
              png.data[idx+1] = col.green();
              png.data[idx+2] = col.blue();
            } else {
              png.data[idx  ] = 0;
              png.data[idx+1] = 0;
              png.data[idx+2] = 0;
            }
            png.data[idx+3] = 255;
          }
        }
      }
    }
  }
}

png.pack().pipe(fs.createWriteStream('files/biome_colors.png'));
